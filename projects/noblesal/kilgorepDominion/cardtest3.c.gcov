        -:    0:Source:cardtest3.c
        -:    0:Programs:17
        -:    1:// VILLAGE 1344
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "interface.h"
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:#include "assertTest.h"
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <string.h>
        -:   13:
        -:   14:
        2:   15:int main (int argc, char *argv[])
        -:   16:{
        -:   17:    // GAME SETUP
        2:   18:    int numPlayers = 2;
        2:   19:    int kingdomCards[10] = {adventurer, smithy, gardens, village, council_room, minion, steward, great_hall, tribute, ambassador};
        2:   20:    int seed = 1000,
        2:   21:        passed = 0;
        -:   22:
        -:   23:    struct gameState BASE, G, testG;
        2:   24:    initializeGame(numPlayers, kingdomCards, seed, &BASE);
        -:   25:
        -:   26:
        -:   27:    // GENERAL CARD IMPLEMENTATION VARIABLES
        -:   28:    int retVal,
        -:   29:        retValTest,
        2:   30:        testNumber = 1,
        -:   31:        card,
        2:   32:        choice1 = 0,
        2:   33:        choice2 = 0,
        2:   34:        choice3 = 0,
        2:   35:        handPos = 0,
        -:   36:        bonus;
        -:   37:
        -:   38:    // FUNCTION SPECIFIC
        -:   39:    int currentPlayer;
        -:   40:
        -:   41:    // TEST 1
        2:   42:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:   43:    printf("Test Initial Game Implementation\n\n");
        2:   44:    memcpy(&G, &BASE, sizeof(struct gameState));
        2:   45:    retVal = 0;
        2:   46:    card = village;
        -:   47:
        2:   48:    currentPlayer = whoseTurn(&G);
        2:   49:    gainCard(card, &G, 2, currentPlayer);
        2:   50:    handPos = G.handCount[currentPlayer]-1;
        -:   51:
        -:   52:    // STAGE HAND/DECK
        -:   53:
        -:   54:    // COPY STATE & EXECTUTE TEST
        2:   55:    memcpy(&testG, &G, sizeof(struct gameState));
        2:   56:    retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   57:
        2:   58:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:   59:    passed = assertInt(retVal, retValTest);
        2:   60:    if (passed) printf("PASSED\n");
    #####:   61:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:   62:
        2:   63:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:   64:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:   65:    if (passed) printf("PASSED\n");
    #####:   66:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:   67:
        2:   68:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:   69:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:   70:    if (passed) printf("PASSED\n");
        2:   71:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:   72:
        2:   73:    printf("numActions: %i, expected: %i\t\t", G.numActions, G.numActions+2);
        2:   74:    passed = assertInt(testG.numActions, G.numActions+2);
        2:   75:    if (passed) printf("PASSED\n");
    #####:   76:    else printf("FAILED\tnumActions: %i\n", testG.numActions);
        -:   77:
        -:   78:
        -:   79:
        -:   80:    // TEST 2
        2:   81:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:   82:    printf("Set deckCount to 0\n\n");
        2:   83:    memcpy(&G, &BASE, sizeof(struct gameState));
        2:   84:    retVal = 0;
        2:   85:    card = village;
        -:   86:
        2:   87:    currentPlayer = whoseTurn(&G);
        -:   88:
        -:   89:    // STAGE HAND/DECK
        2:   90:    G.deckCount[currentPlayer] = 0;
        2:   91:    gainCard(card, &G, 2, currentPlayer);
        2:   92:    handPos = G.handCount[currentPlayer]-1;
        -:   93:
        2:   94:    memcpy(&testG, &G, sizeof(struct gameState));
        2:   95:    retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   96:
        2:   97:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:   98:    passed = assertInt(retVal, retValTest);
        2:   99:    if (passed) printf("PASSED\n");
    #####:  100:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:  101:
        2:  102:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  103:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  104:    if (passed) printf("PASSED\n");
        2:  105:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  106:
        2:  107:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  108:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  109:    if (passed) printf("PASSED\n");
    #####:  110:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  111:
        2:  112:    printf("numActions: %i, expected: %i\t\t", G.numActions, G.numActions+2);
        2:  113:    passed = assertInt(testG.numActions, G.numActions+2);
        2:  114:    if (passed) printf("PASSED\n");
    #####:  115:    else printf("FAILED\tnumActions: %i\n", testG.numActions);
        -:  116:
        -:  117:
        -:  118:    // TEST 3
        2:  119:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:  120:    printf("Set deckCount and discardCount to 0\n\n");
        2:  121:    memcpy(&G, &BASE, sizeof(struct gameState));
        2:  122:    retVal = 0;
        2:  123:    card = village;
        -:  124:
        2:  125:    currentPlayer = whoseTurn(&G);
        -:  126:
        -:  127:    // STAGE HAND/DECK
        2:  128:    G.deckCount[currentPlayer] = 0;
        2:  129:    G.discardCount[currentPlayer] = 0;
        2:  130:    gainCard(card, &G, 2, currentPlayer);
        2:  131:    handPos = G.handCount[currentPlayer]-1;
        -:  132:
        2:  133:    memcpy(&testG, &G, sizeof(struct gameState));
        2:  134:    retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  135:
        2:  136:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  137:    passed = assertInt(retVal, retValTest);
        2:  138:    if (passed) printf("PASSED\n");
    #####:  139:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:  140:
        2:  141:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  142:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  143:    if (passed) printf("PASSED\n");
        2:  144:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  145:
        2:  146:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  147:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  148:    if (passed) printf("PASSED\n");
    #####:  149:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  150:
        2:  151:    printf("numActions: %i, expected: %i\t\t", G.numActions, G.numActions+2);
        2:  152:    passed = assertInt(testG.numActions, G.numActions+2);
        2:  153:    if (passed) printf("PASSED\n");
    #####:  154:    else printf("FAILED\tnumActions: %i\n", testG.numActions);
        -:  155:
        -:  156:
        -:  157:    // TEST 4
        2:  158:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:  159:    printf("Set handCount, discardCount, and deckCount to 0 then add Village card to Hand\n\n");
        2:  160:    memcpy(&G, &BASE, sizeof(struct gameState));
        2:  161:    retVal = 0;
        2:  162:    card = village;
        -:  163:
        2:  164:    currentPlayer = whoseTurn(&G);
        -:  165:
        -:  166:    // STAGE HAND/DECK
        2:  167:    G.deckCount[currentPlayer] = 0;
        2:  168:    G.discardCount[currentPlayer] = 0;
        2:  169:    G.handCount[currentPlayer] = 0;
        2:  170:    gainCard(card, &G, 2, currentPlayer);
        2:  171:    handPos = G.handCount[currentPlayer]-1;
        -:  172:
        2:  173:    memcpy(&testG, &G, sizeof(struct gameState));
        2:  174:    retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  175:
        2:  176:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  177:    passed = assertInt(retVal, retValTest);
        2:  178:    if (passed) printf("PASSED\n");
    #####:  179:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:  180:
        2:  181:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  182:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  183:    if (passed) printf("PASSED\n");
        2:  184:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  185:
        2:  186:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  187:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  188:    if (passed) printf("PASSED\n");
    #####:  189:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  190:
        2:  191:    printf("numActions: %i, expected: %i\t\t", G.numActions, G.numActions+2);
        2:  192:    passed = assertInt(testG.numActions, G.numActions+2);
        2:  193:    if (passed) printf("PASSED\n");
    #####:  194:    else printf("FAILED\tnumActions: %i\n", testG.numActions);
        -:  195:
        -:  196:
        -:  197:    // TEST 5
        2:  198:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:  199:    printf("Set handCount, discardCount, and deckCount to 0 then add Village card to Hand\n\n");    memcpy(&G, &BASE, sizeof(struct gameState));
        2:  200:    retVal = 0;
        2:  201:    card = village;
        -:  202:
        2:  203:    currentPlayer = whoseTurn(&G);
        -:  204:
        -:  205:    // STAGE HAND/DECK
        2:  206:    G.deckCount[currentPlayer] = 0;
        2:  207:    G.discardCount[currentPlayer] = 0;
        2:  208:    G.handCount[currentPlayer] = 0;
        -:  209:
        2:  210:    gainCard(card, &G, 2, currentPlayer);
        2:  211:    handPos = G.handCount[currentPlayer]-1;
        -:  212:
        2:  213:    memcpy(&testG, &G, sizeof(struct gameState));
        2:  214:    retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  215:
        2:  216:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  217:    passed = assertInt(retVal, retValTest);
        2:  218:    if (passed) printf("PASSED\n");
    #####:  219:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:  220:
        2:  221:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  222:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  223:    if (passed) printf("PASSED\n");
        2:  224:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  225:
        2:  226:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  227:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  228:    if (passed) printf("PASSED\n");
    #####:  229:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  230:
        2:  231:    printf("numActions: %i, expected: %i\t\t", G.numActions, G.numActions+2);
        2:  232:    passed = assertInt(testG.numActions, G.numActions+2);
        2:  233:    if (passed) printf("PASSED\n");
    #####:  234:    else printf("FAILED\tnumActions: %i\n", testG.numActions);
        -:  235:
        -:  236:
        -:  237:
        -:  238:        // TEST 1
        2:  239:        printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  240:        printf("Test Initial Game Implementation\n\n");
        2:  241:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:  242:        retVal = 0;
        2:  243:        card = village;
        -:  244:
        2:  245:        currentPlayer = whoseTurn(&G);
        2:  246:        gainCard(card, &G, 2, currentPlayer);
        2:  247:        handPos = G.handCount[currentPlayer]-1;
        -:  248:
        -:  249:        // STAGE HAND/DECK
        -:  250:
        -:  251:        // COPY STATE & EXECTUTE TEST
        2:  252:        memcpy(&testG, &G, sizeof(struct gameState));
        2:  253:        retValTest = villageRefactor(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  254:
        2:  255:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  256:        passed = assertInt(retVal, retValTest);
        2:  257:        if (passed) printf("PASSED\n");
    #####:  258:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  259:
        2:  260:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  261:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  262:        if (passed) printf("PASSED\n");
    #####:  263:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  264:
        2:  265:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  266:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  267:        if (passed) printf("PASSED\n");
        2:  268:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  269:
        2:  270:        printf("numActions: %i, expected: %i\t\t", G.numActions, G.numActions+2);
        2:  271:        passed = assertInt(testG.numActions, G.numActions+2);
        2:  272:        if (passed) printf("PASSED\n");
        2:  273:        else printf("FAILED\tnumActions: %i\n", testG.numActions);
        -:  274:
        -:  275:
        -:  276:
        -:  277:        // TEST 2
        2:  278:        printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  279:        printf("Set deckCount to 0\n\n");
        2:  280:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:  281:        retVal = 0;
        2:  282:        card = village;
        -:  283:
        2:  284:        currentPlayer = whoseTurn(&G);
        -:  285:
        -:  286:        // STAGE HAND/DECK
        2:  287:        G.deckCount[currentPlayer] = 0;
        2:  288:        gainCard(card, &G, 2, currentPlayer);
        2:  289:        handPos = G.handCount[currentPlayer]-1;
        -:  290:
        2:  291:        memcpy(&testG, &G, sizeof(struct gameState));
        2:  292:        retValTest = villageRefactor(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  293:
        2:  294:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  295:        passed = assertInt(retVal, retValTest);
        2:  296:        if (passed) printf("PASSED\n");
    #####:  297:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  298:
        2:  299:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  300:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  301:        if (passed) printf("PASSED\n");
        2:  302:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  303:
        2:  304:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  305:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  306:        if (passed) printf("PASSED\n");
    #####:  307:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  308:
        2:  309:        printf("numActions: %i, expected: %i\t\t", G.numActions, G.numActions+2);
        2:  310:        passed = assertInt(testG.numActions, G.numActions+2);
        2:  311:        if (passed) printf("PASSED\n");
        2:  312:        else printf("FAILED\tnumActions: %i\n", testG.numActions);
        -:  313:
        -:  314:
        -:  315:        // TEST 3
        2:  316:        printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  317:        printf("Set deckCount and discardCount to 0\n\n");
        2:  318:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:  319:        retVal = 0;
        2:  320:        card = village;
        -:  321:
        2:  322:        currentPlayer = whoseTurn(&G);
        -:  323:
        -:  324:        // STAGE HAND/DECK
        2:  325:        G.deckCount[currentPlayer] = 0;
        2:  326:        G.discardCount[currentPlayer] = 0;
        2:  327:        gainCard(card, &G, 2, currentPlayer);
        2:  328:        handPos = G.handCount[currentPlayer]-1;
        -:  329:
        2:  330:        memcpy(&testG, &G, sizeof(struct gameState));
        2:  331:        retValTest = villageRefactor(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  332:
        2:  333:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  334:        passed = assertInt(retVal, retValTest);
        2:  335:        if (passed) printf("PASSED\n");
    #####:  336:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  337:
        2:  338:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  339:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  340:        if (passed) printf("PASSED\n");
        2:  341:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  342:
        2:  343:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  344:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  345:        if (passed) printf("PASSED\n");
    #####:  346:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  347:
        2:  348:        printf("numActions: %i, expected: %i\t\t", G.numActions, G.numActions+2);
        2:  349:        passed = assertInt(testG.numActions, G.numActions+2);
        2:  350:        if (passed) printf("PASSED\n");
        2:  351:        else printf("FAILED\tnumActions: %i\n", testG.numActions);
        -:  352:
        -:  353:
        -:  354:        // TEST 4
        2:  355:        printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  356:        printf("Set handCount, discardCount, and deckCount to 0 then add Village card to Hand\n\n");
        2:  357:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:  358:        retVal = 0;
        2:  359:        card = village;
        -:  360:
        2:  361:        currentPlayer = whoseTurn(&G);
        -:  362:
        -:  363:        // STAGE HAND/DECK
        2:  364:        G.deckCount[currentPlayer] = 0;
        2:  365:        G.discardCount[currentPlayer] = 0;
        2:  366:        G.handCount[currentPlayer] = 0;
        2:  367:        gainCard(card, &G, 2, currentPlayer);
        2:  368:        handPos = G.handCount[currentPlayer]-1;
        -:  369:
        2:  370:        memcpy(&testG, &G, sizeof(struct gameState));
        2:  371:        retValTest = villageRefactor(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  372:
        2:  373:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  374:        passed = assertInt(retVal, retValTest);
        2:  375:        if (passed) printf("PASSED\n");
    #####:  376:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  377:
        2:  378:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  379:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  380:        if (passed) printf("PASSED\n");
        2:  381:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  382:
        2:  383:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  384:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  385:        if (passed) printf("PASSED\n");
    #####:  386:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  387:
        2:  388:        printf("numActions: %i, expected: %i\t\t", G.numActions, G.numActions+2);
        2:  389:        passed = assertInt(testG.numActions, G.numActions+2);
        2:  390:        if (passed) printf("PASSED\n");
        2:  391:        else printf("FAILED\tnumActions: %i\n", testG.numActions);
        -:  392:
        -:  393:
        -:  394:        // TEST 5
        2:  395:        printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  396:        printf("Set handCount, discardCount, and deckCount to 0 then add Village card to Hand\n\n");    memcpy(&G, &BASE, sizeof(struct gameState));
        2:  397:        retVal = 0;
        2:  398:        card = village;
        -:  399:
        2:  400:        currentPlayer = whoseTurn(&G);
        -:  401:
        -:  402:        // STAGE HAND/DECK
        2:  403:        G.deckCount[currentPlayer] = 0;
        2:  404:        G.discardCount[currentPlayer] = 0;
        2:  405:        G.handCount[currentPlayer] = 0;
        -:  406:
        2:  407:        gainCard(card, &G, 2, currentPlayer);
        2:  408:        handPos = G.handCount[currentPlayer]-1;
        -:  409:
        2:  410:        memcpy(&testG, &G, sizeof(struct gameState));
        2:  411:        retValTest = villageRefactor(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  412:
        2:  413:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  414:        passed = assertInt(retVal, retValTest);
        2:  415:        if (passed) printf("PASSED\n");
    #####:  416:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  417:
        2:  418:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  419:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+1-1);
        2:  420:        if (passed) printf("PASSED\n");
        2:  421:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  422:
        2:  423:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  424:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-1+1);
        2:  425:        if (passed) printf("PASSED\n");
    #####:  426:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  427:
        2:  428:        printf("numActions: %i, expected: %i\t\t", G.numActions, G.numActions+2);
        2:  429:        passed = assertInt(testG.numActions, G.numActions+2);
        2:  430:        if (passed) printf("PASSED\n");
        2:  431:        else printf("FAILED\tnumActions: %i\n", testG.numActions);
        -:  432:
        -:  433:
        2:  434:    return 0;
        -:  435:}
