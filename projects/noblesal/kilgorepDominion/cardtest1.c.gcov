        -:    0:Source:cardtest1.c
        -:    0:Programs:17
        -:    1:// ADVENTURER  1290
        -:    2:// REVEAL CARDS FROM YOUR DECK UNTIL YOU REVEAL 2 TREASURE CARDS.
        -:    3://      PUT THOSE THREASURE CARDS INTO YOUR HAND AND DISCARD THE OTHER REVEALED CARDS.
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "dominion_refactor_pk.h"
        -:    7:#include "interface.h"
        -:    8:#include "rngs.h"
        -:    9:
        -:   10:#include "assertTest.h"
        -:   11:
        -:   12:#include <stdio.h>
        -:   13:#include <math.h>
        -:   14:#include <stdlib.h>
        -:   15:#include <string.h>
        -:   16:
        2:   17:int main (int argc, char *argv[])
        -:   18:{
        -:   19:    // GAME SETUP
        2:   20:    int numPlayers = 2;
        2:   21:    int kingdomCards[10] = {adventurer, smithy, gardens, village, council_room, minion, steward, great_hall, tribute, ambassador};
        2:   22:    int seed = 1000,
        2:   23:        passed = 0;
        -:   24:
        -:   25:    struct gameState BASE, G, testG;
        2:   26:    initializeGame(numPlayers, kingdomCards, seed, &BASE);
        -:   27:
        -:   28:
        -:   29:    // GENERAL CARD IMPLEMENTATION VARIABLES
        -:   30:    int retVal,
        -:   31:        retValTest,
        2:   32:        testNumber = 1,
        2:   33:        choice1 = 0,
        2:   34:        choice2 = 0,
        2:   35:        choice3 = 0,
        2:   36:        handPos = 0,
        -:   37:        bonus;
        -:   38:
        -:   39:    // FUNCTION SPECIFIC
        -:   40:    int currentPlayer,
        -:   41:        card;
        -:   42:
        -:   43:
        -:   44:    // TEST 1
        2:   45:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:   46:    printf("Test Initial Game Implementation\n\n");
        2:   47:    memcpy(&G, &BASE, sizeof(struct gameState));
        -:   48:
        2:   49:    retVal = 0;
        2:   50:    card = adventurer;
        -:   51:
        2:   52:    currentPlayer = whoseTurn(&G);
        -:   53:
        2:   54:    memcpy(&testG, &G, sizeof(struct gameState));
        2:   55:    retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   56:
        -:   57:
        2:   58:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:   59:    passed = assertInt(retVal, retValTest);
        2:   60:    if (passed) printf("PASSED\n");
    #####:   61:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:   62:
        2:   63:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:   64:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:   65:    if (passed) printf("PASSED\n");
        2:   66:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:   67:
        2:   68:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:   69:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:   70:    if (passed) printf("PASSED\n");
        2:   71:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:   72:
        -:   73:
        -:   74:    // TEST 2
        2:   75:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:   76:    printf("Stage Deck From 0 - 5: gold, gold, estate, copper, estate\n\n");
        2:   77:    memcpy(&G, &BASE, sizeof(struct gameState));
        -:   78:
        2:   79:    retVal = 0;
        -:   80:
        2:   81:    card = adventurer;
        2:   82:    currentPlayer = whoseTurn(&G);
        -:   83:
        -:   84:    // STAGE HAND/DECK
        2:   85:    G.deck[currentPlayer][0] = gold;
        2:   86:    G.deck[currentPlayer][1] = gold;
        2:   87:    G.deck[currentPlayer][2] = estate;
        2:   88:    G.deck[currentPlayer][3] = copper;
        2:   89:    G.deck[currentPlayer][4] = estate;
        -:   90:
        2:   91:    memcpy(&testG, &G, sizeof(struct gameState));
        2:   92:    retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   93:
        -:   94:    // printHand(G.whoseTurn, &G);
        -:   95:    // printDeck(G.whoseTurn, &G);
        -:   96:    // printDiscard(G.whoseTurn, &G);
        -:   97:
        -:   98:
        2:   99:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  100:    passed = assertInt(retVal, retValTest);
        2:  101:    if (passed) printf("PASSED\n");
    #####:  102:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:  103:
        2:  104:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  105:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  106:    if (passed) printf("PASSED\n");
        2:  107:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  108:
        2:  109:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  110:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  111:    if (passed) printf("PASSED\n");
        2:  112:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  113:
        -:  114:
        -:  115:    // TEST 3
        -:  116:    // NO TREASURE IN DECK
        2:  117:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:  118:    printf("Stage Deck From 0 - 5: estate, estate, estate, estate, estate\n\n");
        2:  119:    memcpy(&G, &BASE, sizeof(struct gameState));
        2:  120:    retVal = 0;
        2:  121:    card = adventurer;
        -:  122:
        2:  123:    currentPlayer = whoseTurn(&G);
        -:  124:
        -:  125:    // STAGE HAND/DECK test
        2:  126:    G.deck[currentPlayer][0] = estate;
        2:  127:    G.deck[currentPlayer][1] = estate;
        2:  128:    G.deck[currentPlayer][2] = estate;
        2:  129:    G.deck[currentPlayer][3] = estate;
        2:  130:    G.deck[currentPlayer][4] = estate;
        -:  131:
        2:  132:    memcpy(&testG, &G, sizeof(struct gameState));
        2:  133:    retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  134:
        -:  135:
        2:  136:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  137:    passed = assertInt(retVal, retValTest);
        2:  138:    if (passed) printf("PASSED\n");
    #####:  139:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:  140:
        2:  141:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  142:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  143:    if (passed) printf("PASSED\n");
        2:  144:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  145:
        2:  146:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  147:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  148:    if (passed) printf("PASSED\n");
        2:  149:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  150:
        -:  151:    // TEST 4
        2:  152:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:  153:    printf("Stage Empty Deck\n\n");
        2:  154:    retVal = 0;
        2:  155:    card = adventurer;
        -:  156:
        2:  157:    currentPlayer = whoseTurn(&G);
        -:  158:
        -:  159:    // STAGE HAND/DECK
        2:  160:    G.deckCount[currentPlayer] = 0;
        -:  161:
        2:  162:    memcpy(&testG, &G, sizeof(struct gameState));
        2:  163:    retValTest = effectOfAdventurer(&testG, currentPlayer);
        -:  164:
        2:  165:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  166:    passed = assertInt(retVal, retValTest);
        2:  167:    if (passed) printf("PASSED\n");
    #####:  168:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:  169:
        2:  170:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  171:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  172:    if (passed) printf("PASSED\n");
        2:  173:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  174:
        2:  175:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  176:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  177:    if (passed) printf("PASSED\n");
        2:  178:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  179:
        -:  180:    // TEST 5
        2:  181:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:  182:    printf("Stage empty Deck and Discard piles\n\n");
        2:  183:    memcpy(&G, &BASE, sizeof(struct gameState));
        2:  184:    retVal = 0;
        2:  185:    card = adventurer;
        -:  186:
        2:  187:    currentPlayer = whoseTurn(&G);
        -:  188:
        -:  189:    // STAGE HAND/DECK
        2:  190:    G.deckCount[currentPlayer] = 0;
        2:  191:    G.discardCount[currentPlayer] = 0;
        -:  192:
        2:  193:    memcpy(&testG, &G, sizeof(struct gameState));
        2:  194:    retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  195:
        -:  196:    // printHand(G.whoseTurn, &G);
        -:  197:    // printDeck(G.whoseTurn, &G);
        -:  198:    // printDiscard(G.whoseTurn, &G);
        -:  199:
        -:  200:
        2:  201:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  202:    passed = assertInt(retVal, retValTest);
        2:  203:    if (passed) printf("PASSED\n");
    #####:  204:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:  205:
        2:  206:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  207:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  208:    if (passed) printf("PASSED\n");
        2:  209:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  210:
        2:  211:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  212:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  213:    if (passed) printf("PASSED\n");
        2:  214:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  215:
        -:  216:
        -:  217:    // TEST 6
        2:  218:    printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:  219:    printf("Stage empty Hand, Deck and Discard piles\n\n");
        2:  220:    memcpy(&G, &BASE, sizeof(struct gameState));
        2:  221:    retVal = 0;
        2:  222:    card = adventurer;
        -:  223:
        2:  224:    currentPlayer = whoseTurn(&G);
        -:  225:
        -:  226:    // STAGE HAND/DECK
        2:  227:    G.deckCount[currentPlayer] = 0;
        2:  228:    G.handCount[currentPlayer] = 0;
        2:  229:    G.discardCount[currentPlayer] = 0;
        -:  230:
        2:  231:    memcpy(&testG, &G, sizeof(struct gameState));
        2:  232:    retValTest = effectOfAdventurer(&testG, currentPlayer);
        -:  233:
        -:  234:    // printHand(G.whoseTurn, &G);
        -:  235:    // printDeck(G.whoseTurn, &G);
        -:  236:    // printDiscard(G.whoseTurn, &G);
        -:  237:
        -:  238:
        2:  239:    printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  240:    passed = assertInt(retVal, retValTest);
        2:  241:    if (passed) printf("PASSED\n");
    #####:  242:    else printf("FAILED\treturn value: %i\n", retValTest);
        -:  243:
        2:  244:    printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  245:    passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  246:    if (passed) printf("PASSED\n");
        2:  247:    else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  248:
        2:  249:    printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  250:    passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  251:    if (passed) printf("PASSED\n");
        2:  252:    else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  253:
        2:  254:testNumber =1;
        -:  255:// TEST 1
        2:  256:printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  257:printf("Test Initial Game Implementation\n\n");
        2:  258:memcpy(&G, &BASE, sizeof(struct gameState));
        -:  259:
        2:  260:retVal = 0;
        2:  261:card = adventurer;
        -:  262:
        2:  263:currentPlayer = whoseTurn(&G);
        -:  264:
        2:  265:memcpy(&testG, &G, sizeof(struct gameState));
        2:  266:retValTest = effectOfAdventurer(&testG, currentPlayer);
        -:  267:
        -:  268:
        2:  269:printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  270:passed = assertInt(retVal, retValTest);
        2:  271:if (passed) printf("PASSED\n");
    #####:  272:else printf("FAILED\treturn value: %i\n", retValTest);
        -:  273:
        2:  274:printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  275:passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  276:if (passed) printf("PASSED\n");
    #####:  277:else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  278:
        2:  279:printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  280:passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  281:if (passed) printf("PASSED\n");
    #####:  282:else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  283:
        -:  284:
        -:  285:// TEST 2
        2:  286:printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  287:printf("Stage Deck From 0 - 5: gold, gold, estate, copper, estate\n\n");
        2:  288:memcpy(&G, &BASE, sizeof(struct gameState));
        -:  289:
        2:  290:retVal = 0;
        -:  291:
        2:  292:card = adventurer;
        2:  293:currentPlayer = whoseTurn(&G);
        -:  294:
        -:  295:// STAGE HAND/DECK
        2:  296:G.deck[currentPlayer][0] = gold;
        2:  297:G.deck[currentPlayer][1] = gold;
        2:  298:G.deck[currentPlayer][2] = estate;
        2:  299:G.deck[currentPlayer][3] = copper;
        2:  300:G.deck[currentPlayer][4] = estate;
        -:  301:
        2:  302:memcpy(&testG, &G, sizeof(struct gameState));
        2:  303:retValTest = effectOfAdventurer(&testG, currentPlayer);
        -:  304:
        -:  305:// printHand(G.whoseTurn, &G);
        -:  306:// printDeck(G.whoseTurn, &G);
        -:  307:// printDiscard(G.whoseTurn, &G);
        -:  308:
        -:  309:
        2:  310:printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  311:passed = assertInt(retVal, retValTest);
        2:  312:if (passed) printf("PASSED\n");
    #####:  313:else printf("FAILED\treturn value: %i\n", retValTest);
        -:  314:
        2:  315:printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  316:passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  317:if (passed) printf("PASSED\n");
    #####:  318:else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  319:
        2:  320:printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  321:passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  322:if (passed) printf("PASSED\n");
    #####:  323:else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  324:
        -:  325:
        -:  326:// TEST 3
        -:  327:// NO TREASURE IN DECK
        2:  328:printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  329:printf("Stage Deck From 0 - 5: estate, estate, estate, estate, estate\n\n");
        2:  330:memcpy(&G, &BASE, sizeof(struct gameState));
        2:  331:retVal = 0;
        2:  332:card = adventurer;
        -:  333:
        2:  334:currentPlayer = whoseTurn(&G);
        -:  335:
        -:  336:// STAGE HAND/DECK test
        2:  337:G.deck[currentPlayer][0] = estate;
        2:  338:G.deck[currentPlayer][1] = estate;
        2:  339:G.deck[currentPlayer][2] = estate;
        2:  340:G.deck[currentPlayer][3] = estate;
        2:  341:G.deck[currentPlayer][4] = estate;
        -:  342:
        2:  343:memcpy(&testG, &G, sizeof(struct gameState));
        2:  344:retValTest = effectOfAdventurer(&testG, currentPlayer);
        -:  345:
        -:  346:
        2:  347:printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  348:passed = assertInt(retVal, retValTest);
        2:  349:if (passed) printf("PASSED\n");
    #####:  350:else printf("FAILED\treturn value: %i\n", retValTest);
        -:  351:
        2:  352:printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  353:passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  354:if (passed) printf("PASSED\n");
        2:  355:else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  356:
        2:  357:printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  358:passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  359:if (passed) printf("PASSED\n");
        2:  360:else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  361:
        -:  362:// TEST 4
        2:  363:printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  364:printf("Stage Empty Deck\n\n");
        2:  365:retVal = 0;
        2:  366:card = adventurer;
        -:  367:
        2:  368:currentPlayer = whoseTurn(&G);
        -:  369:
        -:  370:// STAGE HAND/DECK
        2:  371:G.deckCount[currentPlayer] = 0;
        -:  372:
        2:  373:memcpy(&testG, &G, sizeof(struct gameState));
        2:  374:retValTest = effectOfAdventurer(&testG, currentPlayer);
        -:  375:
        2:  376:printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  377:passed = assertInt(retVal, retValTest);
        2:  378:if (passed) printf("PASSED\n");
    #####:  379:else printf("FAILED\treturn value: %i\n", retValTest);
        -:  380:
        2:  381:printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  382:passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  383:if (passed) printf("PASSED\n");
        2:  384:else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  385:
        2:  386:printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  387:passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  388:if (passed) printf("PASSED\n");
        2:  389:else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  390:
        -:  391:// TEST 5
        2:  392:printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  393:printf("Stage empty Deck and Discard piles\n\n");
        2:  394:memcpy(&G, &BASE, sizeof(struct gameState));
        2:  395:retVal = 0;
        2:  396:card = adventurer;
        -:  397:
        2:  398:currentPlayer = whoseTurn(&G);
        -:  399:
        -:  400:// STAGE HAND/DECK
        2:  401:G.deckCount[currentPlayer] = 0;
        2:  402:G.discardCount[currentPlayer] = 0;
        -:  403:
        2:  404:memcpy(&testG, &G, sizeof(struct gameState));
        2:  405:retValTest = effectOfAdventurer(&testG, currentPlayer);
        -:  406:
        -:  407:// printHand(G.whoseTurn, &G);
        -:  408:// printDeck(G.whoseTurn, &G);
        -:  409:// printDiscard(G.whoseTurn, &G);
        -:  410:
        -:  411:
        2:  412:printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  413:passed = assertInt(retVal, retValTest);
        2:  414:if (passed) printf("PASSED\n");
    #####:  415:else printf("FAILED\treturn value: %i\n", retValTest);
        -:  416:
        2:  417:printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  418:passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  419:if (passed) printf("PASSED\n");
        2:  420:else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  421:
        2:  422:printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  423:passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  424:if (passed) printf("PASSED\n");
        2:  425:else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  426:
        -:  427:
        -:  428:// TEST 6
        2:  429:printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  430:printf("Stage empty Hand, Deck and Discard piles\n\n");
        2:  431:memcpy(&G, &BASE, sizeof(struct gameState));
        2:  432:retVal = 0;
        2:  433:card = adventurer;
        -:  434:
        2:  435:currentPlayer = whoseTurn(&G);
        -:  436:
        -:  437:// STAGE HAND/DECK
        2:  438:G.deckCount[currentPlayer] = 0;
        2:  439:G.handCount[currentPlayer] = 0;
        2:  440:G.discardCount[currentPlayer] = 0;
        -:  441:
        2:  442:memcpy(&testG, &G, sizeof(struct gameState));
        2:  443:retValTest = effectOfAdventurer(&testG, currentPlayer);
        -:  444:
        -:  445:// printHand(G.whoseTurn, &G);
        -:  446:// printDeck(G.whoseTurn, &G);
        -:  447:// printDiscard(G.whoseTurn, &G);
        -:  448:
        -:  449:
        2:  450:printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  451:passed = assertInt(retVal, retValTest);
        2:  452:if (passed) printf("PASSED\n");
    #####:  453:else printf("FAILED\treturn value: %i\n", retValTest);
        -:  454:
        2:  455:printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  456:passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+2);
        2:  457:if (passed) printf("PASSED\n");
        2:  458:else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  459:
        2:  460:printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  461:passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-2);
        2:  462:if (passed) printf("PASSED\n");
        2:  463:else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  464:
        -:  465:
        2:  466:    return 0;
        -:  467:}
