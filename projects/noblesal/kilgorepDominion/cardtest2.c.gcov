        -:    0:Source:cardtest2.c
        -:    0:Programs:17
        -:    1:// SMITHY
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "dominion_refactor_pk.h"
        -:    5:#include "interface.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#include "assertTest.h"
        -:    9:
        -:   10:#include <stdio.h>
        -:   11:#include <math.h>
        -:   12:#include <stdlib.h>
        -:   13:#include <string.h>
        -:   14:
        2:   15:int main (int argc, char *argv[])
        -:   16:{
        -:   17:    // GAME SETUP
        2:   18:    int numPlayers = 2;
        2:   19:    int kingdomCards[10] = {adventurer, smithy, gardens, village, council_room, minion, steward, great_hall, tribute, ambassador};
        2:   20:    int seed = 1000,
        -:   21:        passed;
        -:   22:
        -:   23:    struct gameState BASE, G, testG;
        2:   24:    initializeGame(numPlayers, kingdomCards, seed, &BASE);
        -:   25:
        -:   26:
        -:   27:    // GENERAL CARD IMPLEMENTATION VARIABLES
        -:   28:    int retVal,
        -:   29:        retValTest,
        2:   30:        testNumber = 1,
        -:   31:        card,
        2:   32:        choice1 = 0,
        2:   33:        choice2 = 0,
        2:   34:        choice3 = 0,
        2:   35:        handPos = 0,
        -:   36:        bonus;
        -:   37:
        -:   38:    // FUNCTION SPECIFIC
        -:   39:    int currentPlayer;
        -:   40:
        -:   41:
        -:   42:        // TEST 1
        2:   43:        printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:   44:        printf("Test Initial Game Implementation\n\n");
        2:   45:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:   46:        retVal = 0;
        2:   47:        card = smithy;
        -:   48:
        2:   49:        currentPlayer = whoseTurn(&G);
        2:   50:        gainCard(card, &G, 2, currentPlayer);
        2:   51:        handPos = G.handCount[currentPlayer]-1;
        -:   52:        // STAGE HAND/DECK
        -:   53:
        2:   54:        memcpy(&testG, &G, sizeof(struct gameState));
        2:   55:        retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   56:
        2:   57:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:   58:        passed = assertInt(retVal, retValTest);
        2:   59:        if (passed) printf("PASSED\n");
    #####:   60:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:   61:
        2:   62:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:   63:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:   64:        if (passed) printf("PASSED\n");
        2:   65:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:   66:
        2:   67:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:   68:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:   69:        if (passed) printf("PASSED\n");
    #####:   70:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:   71:
        -:   72:
        -:   73:        // TEST 2
        2:   74:        printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:   75:        printf("Set deckCount to 0\n\n");
        2:   76:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:   77:        retVal = 0;
        2:   78:        card = smithy;
        -:   79:
        2:   80:        currentPlayer = whoseTurn(&G);
        2:   81:        gainCard(card, &G, 2, currentPlayer);
        2:   82:        handPos = G.handCount[currentPlayer]-1;
        -:   83:
        -:   84:        // STAGE HAND/DECK
        2:   85:        G.deckCount[currentPlayer] = 0;
        -:   86:
        2:   87:        memcpy(&testG, &G, sizeof(struct gameState));
        -:   88:        // printHand(testG.whoseTurn, &testG);
        2:   89:        retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   90:        // printHand(testG.whoseTurn, &testG);
        -:   91:
        2:   92:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:   93:        passed = assertInt(retVal, retValTest);
        2:   94:        if (passed) printf("PASSED\n");
    #####:   95:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:   96:
        2:   97:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:   98:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:   99:        if (passed) printf("PASSED\n");
        2:  100:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  101:
        2:  102:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  103:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  104:        if (passed) printf("PASSED\n");
        2:  105:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  106:
        -:  107:
        -:  108:
        -:  109:        // TEST 3
        2:  110:        printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:  111:        printf("Set deckCount and discardCount to 0\n\n");
        2:  112:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:  113:        retVal = 0;
        2:  114:        card = smithy;
        -:  115:
        2:  116:        currentPlayer = whoseTurn(&G);
        -:  117:
        -:  118:        // STAGE HAND/DECK
        2:  119:        G.deckCount[currentPlayer] = 0;
        2:  120:        G.discardCount[currentPlayer] = 0;
        2:  121:        gainCard(card, &G, 2, currentPlayer);
        2:  122:        handPos = G.handCount[currentPlayer]-1;
        -:  123:
        2:  124:        memcpy(&testG, &G, sizeof(struct gameState));
        2:  125:        retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  126:
        2:  127:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  128:        passed = assertInt(retVal, retValTest);
        2:  129:        if (passed) printf("PASSED\n");
    #####:  130:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  131:
        2:  132:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  133:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  134:        if (passed) printf("PASSED\n");
        2:  135:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  136:
        2:  137:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  138:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  139:        if (passed) printf("PASSED\n");
        2:  140:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  141:
        -:  142:
        -:  143:
        -:  144:        // TEST 4
        2:  145:        printf("\n\nCARD EFFECT: TEST %i STARTED\n", testNumber++);
        2:  146:        printf("Set handCount, deckCount and discardCount to 0, then add Smithy to Hand\n\n");
        2:  147:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:  148:        retVal = 0;
        2:  149:        card = smithy;
        -:  150:
        2:  151:        currentPlayer = whoseTurn(&G);
        -:  152:
        -:  153:        // STAGE HAND/DECK
        2:  154:        G.deckCount[currentPlayer] = 0;
        2:  155:        G.discardCount[currentPlayer] = 0;
        2:  156:        G.handCount[currentPlayer] = 0;
        2:  157:        gainCard(card, &G, 2, currentPlayer);
        2:  158:        handPos = G.handCount[currentPlayer]-1;
        -:  159:
        2:  160:        memcpy(&testG, &G, sizeof(struct gameState));
        2:  161:        retValTest = cardEffect(card, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  162:
        2:  163:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  164:        passed = assertInt(retVal, retValTest);
        2:  165:        if (passed) printf("PASSED\n");
    #####:  166:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  167:
        2:  168:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  169:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  170:        if (passed) printf("PASSED\n");
        2:  171:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  172:
        2:  173:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  174:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  175:        if (passed) printf("PASSED\n");
        2:  176:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  177:
        -:  178:
        2:  179:        testNumber = 1;
        -:  180:        // TEST 1
        2:  181:        printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  182:        printf("Test Initial Game Implementation\n\n");
        2:  183:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:  184:        retVal = 0;
        2:  185:        card = smithy;
        -:  186:
        2:  187:        currentPlayer = whoseTurn(&G);
        2:  188:        gainCard(card, &G, 2, currentPlayer);
        2:  189:        handPos = G.handCount[currentPlayer]-1;
        -:  190:        // STAGE HAND/DECK
        -:  191:
        2:  192:        memcpy(&testG, &G, sizeof(struct gameState));
        2:  193:        retValTest = effectOfSmithy(&testG, currentPlayer, handPos);
        -:  194:
        2:  195:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  196:        passed = assertInt(retVal, retValTest);
        2:  197:        if (passed) printf("PASSED\n");
    #####:  198:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  199:
        2:  200:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  201:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  202:        if (passed) printf("PASSED\n");
        2:  203:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  204:
        2:  205:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  206:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  207:        if (passed) printf("PASSED\n");
        2:  208:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  209:
        -:  210:
        -:  211:        // TEST 2
        2:  212:        printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  213:        printf("Set deckCount to 0\n\n");
        2:  214:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:  215:        retVal = 0;
        2:  216:        card = smithy;
        -:  217:
        2:  218:        currentPlayer = whoseTurn(&G);
        2:  219:        gainCard(card, &G, 2, currentPlayer);
        2:  220:        handPos = G.handCount[currentPlayer]-1;
        -:  221:
        -:  222:        // STAGE HAND/DECK
        2:  223:        G.deckCount[currentPlayer] = 0;
        -:  224:
        2:  225:        memcpy(&testG, &G, sizeof(struct gameState));
        -:  226:        // printHand(testG.whoseTurn, &testG);
        2:  227:        retValTest = effectOfSmithy(&testG, currentPlayer, handPos);
        -:  228:        // printHand(testG.whoseTurn, &testG);
        -:  229:
        2:  230:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  231:        passed = assertInt(retVal, retValTest);
        2:  232:        if (passed) printf("PASSED\n");
    #####:  233:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  234:
        2:  235:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  236:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  237:        if (passed) printf("PASSED\n");
        2:  238:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  239:
        2:  240:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  241:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  242:        if (passed) printf("PASSED\n");
        2:  243:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  244:
        -:  245:
        -:  246:
        -:  247:        // TEST 3
        2:  248:        printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  249:        printf("Set deckCount and discardCount to 0\n\n");
        2:  250:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:  251:        retVal = 0;
        2:  252:        card = smithy;
        -:  253:
        2:  254:        currentPlayer = whoseTurn(&G);
        -:  255:
        -:  256:        // STAGE HAND/DECK
        2:  257:        G.deckCount[currentPlayer] = 0;
        2:  258:        G.discardCount[currentPlayer] = 0;
        2:  259:        gainCard(card, &G, 2, currentPlayer);
        2:  260:        handPos = G.handCount[currentPlayer]-1;
        -:  261:
        2:  262:        memcpy(&testG, &G, sizeof(struct gameState));
        2:  263:        retValTest = effectOfSmithy(&testG, currentPlayer, handPos);
        -:  264:
        2:  265:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  266:        passed = assertInt(retVal, retValTest);
        2:  267:        if (passed) printf("PASSED\n");
    #####:  268:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  269:
        2:  270:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  271:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  272:        if (passed) printf("PASSED\n");
        2:  273:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  274:
        2:  275:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  276:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  277:        if (passed) printf("PASSED\n");
        2:  278:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  279:
        -:  280:
        -:  281:
        -:  282:        // TEST 4
        2:  283:        printf("\n\nFUNCTION: TEST %i STARTED\n", testNumber++);
        2:  284:        printf("Set handCount, deckCount and discardCount to 0, then add Smithy to Hand\n\n");
        2:  285:        memcpy(&G, &BASE, sizeof(struct gameState));
        2:  286:        retVal = 0;
        2:  287:        card = smithy;
        -:  288:
        2:  289:        currentPlayer = whoseTurn(&G);
        -:  290:
        -:  291:        // STAGE HAND/DECK
        2:  292:        G.deckCount[currentPlayer] = 0;
        2:  293:        G.discardCount[currentPlayer] = 0;
        2:  294:        G.handCount[currentPlayer] = 0;
        2:  295:        gainCard(card, &G, 2, currentPlayer);
        2:  296:        handPos = G.handCount[currentPlayer]-1;
        -:  297:
        2:  298:        memcpy(&testG, &G, sizeof(struct gameState));
        2:  299:        retValTest = effectOfSmithy(&testG, currentPlayer, handPos);
        -:  300:
        2:  301:        printf("return value: %i, expected: %i\t\t", retVal, retVal);
        2:  302:        passed = assertInt(retVal, retValTest);
        2:  303:        if (passed) printf("PASSED\n");
    #####:  304:        else printf("FAILED\treturn value: %i\n", retValTest);
        -:  305:
        2:  306:        printf("handCount: %i, expected: %i\t\t", G.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  307:        passed = assertInt(testG.handCount[currentPlayer], G.handCount[currentPlayer]+3-1);
        2:  308:        if (passed) printf("PASSED\n");
        2:  309:        else printf("FAILED\thandCount: %i\n", testG.handCount[currentPlayer]);
        -:  310:
        2:  311:        printf("deckCount+discardCount: %i, expected: %i\t", G.deckCount[currentPlayer]+G.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  312:        passed = assertInt(testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer], G.deckCount[currentPlayer]+G.discardCount[currentPlayer]-3);
        2:  313:        if (passed) printf("PASSED\n");
        2:  314:        else printf("FAILED\thandCount: %i\n", testG.deckCount[currentPlayer]+testG.discardCount[currentPlayer]);
        -:  315:
        -:  316:
        2:  317:    return 0;
        -:  318:}
