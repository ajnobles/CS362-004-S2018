        -:    0:Source:dominion_refactor_pk.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "dominion_refactor_pk.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
   562650:    9:int compare(const void* a, const void* b) {
   562650:   10:  if (*(int*)a > *(int*)b)
   130052:   11:    return 1;
   432598:   12:  if (*(int*)a < *(int*)b)
    89027:   13:    return -1;
   343571:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        6:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
        6:   45:  SelectStream(1);
        6:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
        6:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        6:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
       66:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
      660:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
      600:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        6:   74:  if (numPlayers == 2)
        -:   75:    {
        4:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
        2:   78:  else if (numPlayers == 3)
        -:   79:    {
        2:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        6:   88:  if (numPlayers == 2)
        -:   89:    {
        4:   90:      state->supplyCount[estate] = 8;
        4:   91:      state->supplyCount[duchy] = 8;
        4:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
        2:   96:      state->supplyCount[estate] = 12;
        2:   97:      state->supplyCount[duchy] = 12;
        2:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        6:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  103:  state->supplyCount[silver] = 40;
        6:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      126:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
      990:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
      930:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
       60:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       24:  116:		  if (numPlayers == 2){ 
        8:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
        4:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
       48:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       60:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
      870:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       20:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       14:  141:      state->deckCount[i] = 0;
       56:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       42:  144:	  state->deck[i][j] = estate;
       42:  145:	  state->deckCount[i]++;
        -:  146:	}
      112:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
       98:  149:	  state->deck[i][j] = copper;
       98:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       20:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       14:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
       20:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       14:  167:      state->handCount[i] = 0;
       14:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      168:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      162:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        6:  183:  state->outpostPlayed = 0;
        6:  184:  state->phase = 0;
        6:  185:  state->numActions = 1;
        6:  186:  state->numBuys = 1;
        6:  187:  state->playedCardCount = 0;
        6:  188:  state->whoseTurn = 0;
        6:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
       36:  193:  for (it = 0; it < 5; it++){
       30:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
        6:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        6:  199:  return 0;
        -:  200:}
        -:  201:
    67846:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
    67846:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
    67846:  210:  if (state->deckCount[player] < 1)
     5310:  211:    return -1;
    62536:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
   492594:  215:  while (state->deckCount[player] > 0) {
   367522:  216:    card = floor(Random() * state->deckCount[player]);
   367522:  217:    newDeck[newDeckPos] = state->deck[player][card];
   367522:  218:    newDeckPos++;
   944555:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   577033:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
   367522:  222:    state->deckCount[player]--;
        -:  223:  }
   430058:  224:  for (i = 0; i < newDeckPos; i++) {
   367522:  225:    state->deck[player][i] = newDeck[i];
   367522:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
    62536:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
        -:  310:}
        -:  311:
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
    20026:  321:int supplyCount(int card, struct gameState *state) {
    20026:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
    40048:  347:int whoseTurn(struct gameState *state) {
    40048:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
   178746:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
   178746:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    23993:  534:    for (i = 0; i < state->discardCount[player];i++){
    13369:  535:      state->deck[player][i] = state->discard[player][i];
    13369:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
    10624:  539:    state->deckCount[player] = state->discardCount[player];
    10624:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
    10624:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
    10624:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
    10624:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
    10624:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    10624:  560:    if (deckCounter == 0)
     5310:  561:      return -1;
        -:  562:
     5314:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     5314:  564:    state->deckCount[player]--;
     5314:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
   168122:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
   168122:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
   168122:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   168122:  577:    state->deckCount[player]--;
   168122:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
   173436:  581:  return 0;
        -:  582:}
        -:  583:
    10004:  584:int getCost(int cardNumber)
        -:  585:{
    10004:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    10004:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
    30013:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
    30013:  654:  int currentPlayer = whoseTurn(state);
    30013:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
    30013:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
    30013:  659:  int z = 0;// this is the counter for the temp hand
    30013:  660:  if (nextPlayer > (state->numPlayers - 1)){
    11615:  661:    nextPlayer = 0;
        -:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
    30013:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
    10004:  669:      effectOfAdventurer(state, currentPlayer);
        -:  670:			
        -:  671:    case council_room:
    10004:  672:      effectOfCouncilRoom(state, currentPlayer, handPos);
        -:  673:			
        -:  674:    case feast:
        -:  675:      //gain card with cost up to 5
        -:  676:      //Backup hand
    88890:  677:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    78886:  678:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    78886:  679:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  680:      }
        -:  681:      //Backup hand
        -:  682:
        -:  683:      //Update Coins for Buy
    10004:  684:      updateCoins(currentPlayer, state, 5);
    10004:  685:      x = 1;//Condition to loop on
    30012:  686:      while( x == 1) {//Buy one card
    10004:  687:	if (supplyCount(choice1, state) <= 0){
        -:  688:	  if (DEBUG)
        -:  689:	    printf("None of that card left, sorry!\n");
        -:  690:
        -:  691:	  if (DEBUG){
        -:  692:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  693:	  }
        -:  694:	}
    10004:  695:	else if (state->coins < getCost(choice1)){
    #####:  696:	  printf("That card is too expensive!\n");
        -:  697:
        -:  698:	  if (DEBUG){
        -:  699:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  700:	  }
        -:  701:	}
        -:  702:	else{
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  706:	  }
        -:  707:
    10004:  708:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    10004:  709:	  x = 0;//No more buying cards
        -:  710:
        -:  711:	  if (DEBUG){
        -:  712:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  713:	  }
        -:  714:
        -:  715:	}
        -:  716:      }     
        -:  717:
        -:  718:      //Reset Hand
    88890:  719:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    78886:  720:	state->hand[currentPlayer][i] = temphand[i];
    78886:  721:	temphand[i] = -1;
        -:  722:      }
        -:  723:      //Reset Hand
        -:  724:      			
    10004:  725:      return 0;
        -:  726:			
        -:  727:    case gardens:
    #####:  728:      return -1;
        -:  729:			
        -:  730:    case mine:
    #####:  731:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  732:
    #####:  733:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  734:	{
    #####:  735:	  return -1;
        -:  736:	}
        -:  737:		
    #####:  738:      if (choice2 > treasure_map || choice2 < curse)
        -:  739:	{
    #####:  740:	  return -1;
        -:  741:	}
        -:  742:
    #####:  743:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
    #####:  748:      gainCard(choice2, state, 2, currentPlayer);
        -:  749:
        -:  750:      //discard card from hand
    #####:  751:      discardCard(handPos, currentPlayer, state, 0);
        -:  752:
        -:  753:      //discard trashed card
    #####:  754:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  755:	{
    #####:  756:	  if (state->hand[currentPlayer][i] == j)
        -:  757:	    {
    #####:  758:	      discardCard(i, currentPlayer, state, 0);			
    #####:  759:	      break;
        -:  760:	    }
        -:  761:	}
        -:  762:			
    #####:  763:      return 0;
        -:  764:			
        -:  765:    case remodel:
    #####:  766:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  767:
    #####:  768:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  769:	{
    #####:  770:	  return -1;
        -:  771:	}
        -:  772:
    #####:  773:      gainCard(choice2, state, 0, currentPlayer);
        -:  774:
        -:  775:      //discard card from hand
    #####:  776:      discardCard(handPos, currentPlayer, state, 0);
        -:  777:
        -:  778:      //discard trashed card
    #####:  779:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  780:	{
    #####:  781:	  if (state->hand[currentPlayer][i] == j)
        -:  782:	    {
    #####:  783:	      discardCard(i, currentPlayer, state, 0);			
    #####:  784:	      break;
        -:  785:	    }
        -:  786:	}
        -:  787:
        -:  788:
    #####:  789:      return 0;
        -:  790:		
        -:  791:    case smithy:
    10004:  792:      effectOfSmithy(state, currentPlayer, handPos);
        -:  793:		
        -:  794:    case village:
        -:  795:      //+1 Card
    20009:  796:      drawCard(currentPlayer, state);
        -:  797:			
        -:  798:      //+2 Actions
    20009:  799:      state->numActions = state->numActions + 2;
        -:  800:			
        -:  801:      //discard played card from hand
    20009:  802:      discardCard(handPos, currentPlayer, state, 0);
    20009:  803:      return 0;
        -:  804:		
        -:  805:    case baron:
    #####:  806:      state->numBuys++;//Increase buys by 1!
    #####:  807:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  808:	int p = 0;//Iterator for hand!
    #####:  809:	int card_not_discarded = 1;//Flag for discard set!
    #####:  810:	while(card_not_discarded){
    #####:  811:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  812:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  813:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  814:	    state->discardCount[currentPlayer]++;
    #####:  815:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  816:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  817:	    }
    #####:  818:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  819:	    state->handCount[currentPlayer]--;
    #####:  820:	    card_not_discarded = 0;//Exit the loop
        -:  821:	  }
    #####:  822:	  else if (p > state->handCount[currentPlayer]){
        -:  823:	    if(DEBUG) {
        -:  824:	      printf("No estate cards in your hand, invalid choice\n");
        -:  825:	      printf("Must gain an estate if there are any\n");
        -:  826:	    }
    #####:  827:	    if (supplyCount(estate, state) > 0){
    #####:  828:	      gainCard(estate, state, 0, currentPlayer);
    #####:  829:	      state->supplyCount[estate]--;//Decrement estates
    #####:  830:	      if (supplyCount(estate, state) == 0){
    #####:  831:		isGameOver(state);
        -:  832:	      }
        -:  833:	    }
    #####:  834:	    card_not_discarded = 0;//Exit the loop
        -:  835:	  }
        -:  836:			    
        -:  837:	  else{
    #####:  838:	    p++;//Next card
        -:  839:	  }
        -:  840:	}
        -:  841:      }
        -:  842:			    
        -:  843:      else{
    #####:  844:	if (supplyCount(estate, state) > 0){
    #####:  845:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  846:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  847:	  if (supplyCount(estate, state) == 0){
    #####:  848:	    isGameOver(state);
        -:  849:	  }
        -:  850:	}
        -:  851:      }
        -:  852:	    
        -:  853:      
    #####:  854:      return 0;
        -:  855:		
        -:  856:    case great_hall:
        -:  857:      //+1 Card
    #####:  858:      drawCard(currentPlayer, state);
        -:  859:			
        -:  860:      //+1 Actions
    #####:  861:      state->numActions++;
        -:  862:			
        -:  863:      //discard card from hand
    #####:  864:      discardCard(handPos, currentPlayer, state, 0);
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case minion:
        -:  868:      //+1 action
    #####:  869:      state->numActions++;
        -:  870:			
        -:  871:      //discard card from hand
    #####:  872:      discardCard(handPos, currentPlayer, state, 0);
        -:  873:			
    #####:  874:      if (choice1)		//+2 coins
        -:  875:	{
    #####:  876:	  state->coins = state->coins + 2;
        -:  877:	}
        -:  878:			
    #####:  879:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  880:	{
        -:  881:	  //discard hand
    #####:  882:	  while(numHandCards(state) > 0)
        -:  883:	    {
    #####:  884:	      discardCard(handPos, currentPlayer, state, 0);
        -:  885:	    }
        -:  886:				
        -:  887:	  //draw 4
    #####:  888:	  for (i = 0; i < 4; i++)
        -:  889:	    {
    #####:  890:	      drawCard(currentPlayer, state);
        -:  891:	    }
        -:  892:				
        -:  893:	  //other players discard hand and redraw if hand size > 4
    #####:  894:	  for (i = 0; i < state->numPlayers; i++)
        -:  895:	    {
    #####:  896:	      if (i != currentPlayer)
        -:  897:		{
    #####:  898:		  if ( state->handCount[i] > 4 )
        -:  899:		    {
        -:  900:		      //discard hand
    #####:  901:		      while( state->handCount[i] > 0 )
        -:  902:			{
    #####:  903:			  discardCard(handPos, i, state, 0);
        -:  904:			}
        -:  905:							
        -:  906:		      //draw 4
    #####:  907:		      for (j = 0; j < 4; j++)
        -:  908:			{
    #####:  909:			  drawCard(i, state);
        -:  910:			}
        -:  911:		    }
        -:  912:		}
        -:  913:	    }
        -:  914:				
        -:  915:	}
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case steward:
    #####:  919:      effectOfSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
        -:  920:		
        -:  921:    case tribute:
    #####:  922:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  923:	if (state->deckCount[nextPlayer] > 0){
    #####:  924:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  925:	  state->deckCount[nextPlayer]--;
        -:  926:	}
    #####:  927:	else if (state->discardCount[nextPlayer] > 0){
    #####:  928:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  929:	  state->discardCount[nextPlayer]--;
        -:  930:	}
        -:  931:	else{
        -:  932:	  //No Card to Reveal
        -:  933:	  if (DEBUG){
        -:  934:	    printf("No cards to reveal\n");
        -:  935:	  }
        -:  936:	}
        -:  937:      }
        -:  938:	    
        -:  939:      else{
    #####:  940:	if (state->deckCount[nextPlayer] == 0){
    #####:  941:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  942:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  943:	    state->deckCount[nextPlayer]++;
    #####:  944:	    state->discard[nextPlayer][i] = -1;
    #####:  945:	    state->discardCount[nextPlayer]--;
        -:  946:	  }
        -:  947:			    
    #####:  948:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  949:	} 
    #####:  950:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  951:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  952:	state->deckCount[nextPlayer]--;
    #####:  953:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  954:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  955:	state->deckCount[nextPlayer]--;
        -:  956:      }    
        -:  957:		       
    #####:  958:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  959:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  960:	state->playedCardCount++;
    #####:  961:	tributeRevealedCards[1] = -1;
        -:  962:      }
        -:  963:
    #####:  964:      for (i = 0; i <= 2; i ++){
    #####:  965:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  966:	  state->coins += 2;
        -:  967:	}
        -:  968:		    
    #####:  969:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  970:	  drawCard(currentPlayer, state);
    #####:  971:	  drawCard(currentPlayer, state);
        -:  972:	}
        -:  973:	else{//Action Card
    #####:  974:	  state->numActions = state->numActions + 2;
        -:  975:	}
        -:  976:      }
        -:  977:	    
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case ambassador:
    #####:  981:      j = 0;		//used to check if player has enough cards to discard
        -:  982:
    #####:  983:      if (choice2 > 2 || choice2 < 0)
        -:  984:	{
    #####:  985:	  return -1;				
        -:  986:	}
        -:  987:
    #####:  988:      if (choice1 == handPos)
        -:  989:	{
    #####:  990:	  return -1;
        -:  991:	}
        -:  992:
    #####:  993:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  994:	{
    #####:  995:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  996:	    {
    #####:  997:	      j++;
        -:  998:	    }
        -:  999:	}
    #####: 1000:      if (j < choice2)
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
        -: 1005:      if (DEBUG) 
        -: 1006:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1007:
        -: 1008:      //increase supply count for choosen card by amount being discarded
    #####: 1009:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1010:			
        -: 1011:      //each other player gains a copy of revealed card
    #####: 1012:      for (i = 0; i < state->numPlayers; i++)
        -: 1013:	{
    #####: 1014:	  if (i != currentPlayer)
        -: 1015:	    {
    #####: 1016:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1017:	    }
        -: 1018:	}
        -: 1019:
        -: 1020:      //discard played card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1022:
        -: 1023:      //trash copies of cards returned to supply
    #####: 1024:      for (j = 0; j < choice2; j++)
        -: 1025:	{
    #####: 1026:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1027:	    {
    #####: 1028:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1029:		{
    #####: 1030:		  discardCard(i, currentPlayer, state, 1);
    #####: 1031:		  break;
        -: 1032:		}
        -: 1033:	    }
        -: 1034:	}			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case cutpurse:
        -: 1039:
    #####: 1040:      updateCoins(currentPlayer, state, 2);
    #####: 1041:      for (i = 0; i < state->numPlayers; i++)
        -: 1042:	{
    #####: 1043:	  if (i != currentPlayer)
        -: 1044:	    {
    #####: 1045:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1046:		{
    #####: 1047:		  if (state->hand[i][j] == copper)
        -: 1048:		    {
    #####: 1049:		      discardCard(j, i, state, 0);
    #####: 1050:		      break;
        -: 1051:		    }
    #####: 1052:		  if (j == state->handCount[i])
        -: 1053:		    {
    #####: 1054:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1055:			{
        -: 1056:			  if (DEBUG)
        -: 1057:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1058:			}	
    #####: 1059:		      break;
        -: 1060:		    }		
        -: 1061:		}
        -: 1062:					
        -: 1063:	    }
        -: 1064:				
        -: 1065:	}				
        -: 1066:
        -: 1067:      //discard played card from hand
    #####: 1068:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1069:
    #####: 1070:      return 0;
        -: 1071:
        -: 1072:		
        -: 1073:    case embargo: 
        -: 1074:      //+2 Coins
    #####: 1075:      state->coins = state->coins + 2;
        -: 1076:			
        -: 1077:      //see if selected pile is in play
    #####: 1078:      if ( state->supplyCount[choice1] == -1 )
        -: 1079:	{
    #####: 1080:	  return -1;
        -: 1081:	}
        -: 1082:			
        -: 1083:      //add embargo token to selected supply pile
    #####: 1084:      state->embargoTokens[choice1]++;
        -: 1085:			
        -: 1086:      //trash card
    #####: 1087:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case outpost:
        -: 1091:      //set outpost flag
    #####: 1092:      state->outpostPlayed++;
        -: 1093:			
        -: 1094:      //discard card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case salvager:
        -: 1099:      //+1 buy
    #####: 1100:      state->numBuys++;
        -: 1101:			
    #####: 1102:      if (choice1)
        -: 1103:	{
        -: 1104:	  //gain coins equal to trashed card
    #####: 1105:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1106:	  //trash card
    #####: 1107:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1108:	}
        -: 1109:			
        -: 1110:      //discard card
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1112:      return 0;
        -: 1113:		
        -: 1114:    case sea_hag:
    #####: 1115:      effectOfSeaHag(state, currentPlayer);
        -: 1116:		
        -: 1117:    case treasure_map:
        -: 1118:      //search hand for another treasure_map
    #####: 1119:      index = -1;
    #####: 1120:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1121:	{
    #####: 1122:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1123:	    {
    #####: 1124:	      index = i;
    #####: 1125:	      break;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (index > -1)
        -: 1129:	{
        -: 1130:	  //trash both treasure cards
    #####: 1131:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1132:	  discardCard(index, currentPlayer, state, 1);
        -: 1133:
        -: 1134:	  //gain 4 Gold cards
    #####: 1135:	  for (i = 0; i < 4; i++)
        -: 1136:	    {
    #####: 1137:	      gainCard(gold, state, 1, currentPlayer);
        -: 1138:	    }
        -: 1139:				
        -: 1140:	  //return success
    #####: 1141:	  return 1;
        -: 1142:	}
        -: 1143:			
        -: 1144:      //no second treasure_map found in hand
    #####: 1145:      return -1;
        -: 1146:    }
        -: 1147:	
    #####: 1148:  return -1;
        -: 1149:}
        -: 1150:
    60026: 1151:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1152:{
        -: 1153:	
        -: 1154:  //if card is not trashed, added to Played pile 
    60026: 1155:  if (trashFlag < 1)
        -: 1156:    {
        -: 1157:      //add card to played pile
    60026: 1158:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    60026: 1159:      state->playedCardCount++;
        -: 1160:    }
        -: 1161:	
        -: 1162:  //set played card to -1
    60026: 1163:  state->hand[currentPlayer][handPos] = -1;
        -: 1164:	
        -: 1165:  //remove card from player's hand
    60026: 1166:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1167:    {
        -: 1168:      //reduce number of cards in hand
    13306: 1169:      state->handCount[currentPlayer]--;
        -: 1170:    }
    46720: 1171:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1172:    {
        -: 1173:      //reduce number of cards in hand
    #####: 1174:      state->handCount[currentPlayer]--;
        -: 1175:    }
        -: 1176:  else 	
        -: 1177:    {
        -: 1178:      //replace discarded card with last card in hand
    46720: 1179:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1180:      //set last card to -1
    46720: 1181:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1182:      //reduce number of cards in hand
    46720: 1183:      state->handCount[currentPlayer]--;
        -: 1184:    }
        -: 1185:	
    60026: 1186:  return 0;
        -: 1187:}
        -: 1188:
    10022: 1189:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1190:{
        -: 1191:  //Note: supplyPos is enum of choosen card
        -: 1192:	
        -: 1193:  //check if supply pile is empty (0) or card is not used in game (-1)
    10022: 1194:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1195:    {
    #####: 1196:      return -1;
        -: 1197:    }
        -: 1198:	
        -: 1199:  //added card for [whoseTurn] current player:
        -: 1200:  // toFlag = 0 : add to discard
        -: 1201:  // toFlag = 1 : add to deck
        -: 1202:  // toFlag = 2 : add to hand
        -: 1203:
    10022: 1204:  if (toFlag == 1)
        -: 1205:    {
    #####: 1206:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1207:      state->deckCount[player]++;
        -: 1208:    }
    10022: 1209:  else if (toFlag == 2)
        -: 1210:    {
       18: 1211:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       18: 1212:      state->handCount[player]++;
        -: 1213:    }
        -: 1214:  else
        -: 1215:    {
    10004: 1216:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    10004: 1217:      state->discardCount[player]++;
        -: 1218:    }
        -: 1219:	
        -: 1220:  //decrease number in supply pile
    10022: 1221:  state->supplyCount[supplyPos]--;
        -: 1222:	 
    10022: 1223:  return 0;
        -: 1224:}
        -: 1225:
    10010: 1226:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1227:{
        -: 1228:  int i;
        -: 1229:	
        -: 1230:  //reset coin count
    10010: 1231:  state->coins = 0;
        -: 1232:
        -: 1233:  //add coins for each Treasure card in player's hand
    78922: 1234:  for (i = 0; i < state->handCount[player]; i++)
        -: 1235:    {
    68912: 1236:      if (state->hand[player][i] == copper)
        -: 1237:	{
       24: 1238:	  state->coins += 1;
        -: 1239:	}
    68888: 1240:      else if (state->hand[player][i] == silver)
        -: 1241:	{
    #####: 1242:	  state->coins += 2;
        -: 1243:	}
    68888: 1244:      else if (state->hand[player][i] == gold)
        -: 1245:	{
    #####: 1246:	  state->coins += 3;
        -: 1247:	}	
        -: 1248:    }	
        -: 1249:
        -: 1250:  //add bonus
    10010: 1251:  state->coins += bonus;
        -: 1252:
    10010: 1253:  return 0;
        -: 1254:}
        -: 1255:
        -: 1256:
    20012: 1257:int effectOfAdventurer(struct gameState *state, int currentPlayer)
        -: 1258:{
        -: 1259:  int cardDrawn;
    20012: 1260:  int drawntreasure=0;
    20012: 1261:  int z = 0;    // temp hand counter
        -: 1262:  int temphand[MAX_HAND];// moved above the if statement
        -: 1263:
    98690: 1264:  while(drawntreasure<2){
        -: 1265:       /**************************************************************
        -: 1266:       *
        -: 1267:       * !!BUG!!: changed '<1' to '>1'
        -: 1268:       * This causes the deck to always get shuffled.
        -: 1269:       * 
        -: 1270:       * Original code:
        -: 1271:       *
        -: 1272:       * if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -: 1273:       *  
        -: 1274:       **************************************************************/
    58666: 1275:    if (state->deckCount[currentPlayer] > 1){//if the deck is empty we need to shuffle discard and add to deck
    57208: 1276:      shuffle(currentPlayer, state);
        -: 1277:    }
    58666: 1278:    drawCard(currentPlayer, state);
    58666: 1279:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    58666: 1280:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    40024: 1281:      drawntreasure++;
        -: 1282:    else{
    18642: 1283:      temphand[z]=cardDrawn;
    18642: 1284:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    18642: 1285:      z++;
        -: 1286:    }
        -: 1287:  }
    58666: 1288:  while(z-1>=0){
    18642: 1289:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    18642: 1290:    z=z-1;
        -: 1291:  }
    20012: 1292:  return 0;
        -: 1293:}
        -: 1294:
    20008: 1295:int effectOfSmithy(struct gameState *state, int currentPlayer, int handPos)
        -: 1296:{
        -: 1297:  int i;
        -: 1298:
        -: 1299:  /*******************************************************************
        -: 1300:  *
        -: 1301:  * !!BUG!!: changed 'i < 3' to 'i < 2'
        -: 1302:  * This causes only 2 cards to be drawn when the card is played.
        -: 1303:  *
        -: 1304:  * Original code:
        -: 1305:  *
        -: 1306:  * for (i = 0; i < 3; i++)
        -: 1307:  *
        -: 1308:  *******************************************************************/
        -: 1309:
    60024: 1310:  for (i = 0; i < 2; i++)
        -: 1311:  {
    40016: 1312:    drawCard(currentPlayer, state);
        -: 1313:  }
        -: 1314:
        -: 1315:  //discard card from hand
    20008: 1316:  discardCard(handPos, currentPlayer, state, 0);
    20008: 1317:  return 0;
        -: 1318:}
        -: 1319:
    #####: 1320:int effectOfSeaHag(struct gameState *state, int currentPlayer)
        -: 1321:{
        -: 1322:  int i;
        -: 1323:
    #####: 1324:  for (i = 0; i < state->numPlayers; i++) {
    #####: 1325:    if (i != currentPlayer) {
    #####: 1326:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1327:      state->deckCount[i]--;
    #####: 1328:      state->discardCount[i]++;
    #####: 1329:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1330:    }
        -: 1331:  }
    #####: 1332:  return 0;
        -: 1333:}
        -: 1334:
    10004: 1335:int effectOfCouncilRoom(struct gameState *state, int currentPlayer, int handPos)
        -: 1336:{
        -: 1337:  int i;
        -: 1338:
        -: 1339:  //+4 Cards
    50020: 1340:  for (i = 0; i < 4; i++)
        -: 1341:  {
    40016: 1342:    drawCard(currentPlayer, state);
        -: 1343:  }
        -: 1344:      
        -: 1345:  /*******************************************************************
        -: 1346:  *
        -: 1347:  * !!BUG!!: changed 'state->numBuys++' to 'state->numBuys--'
        -: 1348:  * This causes the player to lose instead of gain a buy action.
        -: 1349:  *
        -: 1350:  * Original code:
        -: 1351:  *
        -: 1352:  * //+1 Buy
        -: 1353:  * state->numBuys++;
        -: 1354:  *
        -: 1355:  *******************************************************************/
        -: 1356:
        -: 1357:  //+1 Buy
    10004: 1358:  state->numBuys--;
        -: 1359:      
        -: 1360:  //Each other player draws a card
    30012: 1361:  for (i = 0; i < state->numPlayers; i++)
        -: 1362:  {
    20008: 1363:    if ( i != currentPlayer )
        -: 1364:      {
    10004: 1365:        drawCard(i, state);
        -: 1366:      }
        -: 1367:  }
        -: 1368:      
        -: 1369:  //put played card in played card pile
    10004: 1370:  discardCard(handPos, currentPlayer, state, 0);
        -: 1371:      
    10004: 1372:  return 0;
        -: 1373:}
        -: 1374:
    #####: 1375:int effectOfSteward(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3)
        -: 1376:{
    #####: 1377:  if (choice1 == 1)
        -: 1378:  {
        -: 1379:    //+2 cards
    #####: 1380:    drawCard(currentPlayer, state);
    #####: 1381:    drawCard(currentPlayer, state);
        -: 1382:  }
    #####: 1383:  else if (choice1 == 2)
        -: 1384:  {
        -: 1385:    //+2 coins
    #####: 1386:    state->coins = state->coins + 2;
        -: 1387:  }
        -: 1388:  else
        -: 1389:  {
        -: 1390:    /*****************************************************************
        -: 1391:    *
        -: 1392:    * !!BUG!!: discard instead of trash the two chosen cards
        -: 1393:    * The last parameter of discardCard determines the location where
        -: 1394:    * the discarded card is sent. 1 = trash, 0 = discard pile
        -: 1395:    *
        -: 1396:    * Original code:
        -: 1397:    *
        -: 1398:    * //trash 2 cards in hand
        -: 1399:    * discardCard(choice2, currentPlayer, state, 1);
        -: 1400:    * discardCard(choice3, currentPlayer, state, 1);
        -: 1401:    *
        -: 1402:    *****************************************************************/
        -: 1403:
        -: 1404:    //trash 2 cards in hand
    #####: 1405:    discardCard(choice2, currentPlayer, state, 0);
    #####: 1406:    discardCard(choice3, currentPlayer, state, 0);
        -: 1407:  }
        -: 1408:      
        -: 1409:  //discard card from hand
    #####: 1410:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1411:  return 0;
        -: 1412:}
        -: 1413:
        -: 1414://end of dominion.c
        -: 1415:
        -: 1416:
        -: 1417:// NOBLES REFACTORED
    #####: 1418:int gardensRefactor(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1419:{
    #####: 1420:	return -1;
        -: 1421:}
        -: 1422:
        -: 1423:
    10005: 1424:int villageRefactor(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1425:{
    10005: 1426:	int currentPlayer  = whoseTurn(state);
        -: 1427:
        -: 1428:	//+1 Card
    10005: 1429:	drawCard(currentPlayer, state);
        -: 1430:
        -: 1431:	// BUG ADDED
        -: 1432:	// +2 ACTIONS
        -: 1433:	// state->numActions = state->numActions + 2
    10005: 1434:	state->numActions = state->numActions + 1;
        -: 1435:
        -: 1436:	//discard played card from hand
    10005: 1437:	discardCard(handPos, currentPlayer, state, 0);
    10005: 1438:	return 0;
        -: 1439:}
